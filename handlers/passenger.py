from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types.message import ContentType
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from datetime import datetime, timedelta

from create_bot import dp, bot
from database import crimgo_db
from keyboards import kb_pass, kb_driver, kb_path, kb_seat, kb_geoposition, kb_pp_confirmation, kb_trip_confirmation, kb_payment_type, kb_driver_shift, kb_generic_start, kb_start_trip, kb_onboarding_trip

from random import randrange

from config import config

# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞
class FSMOrder_trip(StatesGroup):
    s_route_selection = State()
    s_seat_selection = State()
    s_geolocation = State()
    s_pp_confirmation = State()
    s_trip_confirmation = State()
    s_payment_type = State()

# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
class FSMOrder_subscribe(StatesGroup):
    s_payment_subscribe = State()

# –°—Ç–∞—Ä—Ç –∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
async def commands_start(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è
    if (await crimgo_db.is_driver_exist(message) is not None):
        # –ï—Å–ª–∏ –≤–∞–ª–∏–¥–µ–Ω
        if (await crimgo_db.is_driver_valid(message) is True):
            # –¢–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–µ–Ω—É
            if (await crimgo_db.is_on_shift(message)): 
                await message.reply('–î–æ–±—Ä—ã–π –¥–µ–Ω—å', reply_markup=kb_driver_shift)
            else: 
                await message.reply('–î–æ–±—Ä—ã–π –¥–µ–Ω—å', reply_markup=kb_driver)
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    else:
        if await crimgo_db.is_exist(message) is True:
            await message.reply('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã\n–≠—Ç–æ –±–æ—Ç CrimGo. –Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–∫–∞–∑–∞—Ç—å –ø–æ–µ–∑–¥–∫—É. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.', reply_markup=kb_pass)
        if await crimgo_db.is_exist(message) is False:          
            await message.reply('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã\n–≠—Ç–æ –±–æ—Ç CrimGo. –Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–∫–∞–∑–∞—Ç—å –ø–æ–µ–∑–¥–∫—É. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.', reply_markup=kb_generic_start)
        await message.answer('https://teletype.in/@crimgo.ru/3lGEr343Vj2')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
async def get_contact(message: types.Message):
    # If not exist, create a user
    await crimgo_db.create_user(message)
    await message.answer('–°–ø–∞—Å–∏–±–æ', reply_markup=kb_pass)

# –ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
async def cmd_contact_with_support(message: types.Message):
    #await bot.send_contact(chat_id = message.from_user.id, phone_number = '+7 978 173-26-90', first_name = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è CrimGo')
    await bot.send_message(chat_id=message.from_user.id, text="<a href='https://t.me/crimgoru'>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è CrimGo</a>", parse_mode="HTML")

# –ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–∞
async def cmd_order_trip(message: types.Message, state: FSMContext):
    await FSMOrder_trip.s_route_selection.set()
    msg = await message.answer('–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª–∞ –ø–æ–µ–∑–¥–∫–∏ 20 –º–∏–Ω—É—Ç. –ë–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –±—É–¥–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω–æ –ø–æ–∑–∂–µ.', reply_markup=kb_path) 
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ò–î —Å–æ–æ–±—â–µ–Ω–∏—è
    await update_msg_list([msg.message_id], state)

# –í—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞
async def menu_route_selection(callback: types.CallbackQuery, state: FSMContext):
    if callback.data != '–û—Ç–º–µ–Ω–∞':
        await FSMOrder_trip.s_seat_selection.set()
        async with state.proxy() as data:
                data['route'] = callback.data
                if callback.data == '–ö –º–æ—Ä—é':
                    data['opposite'] = '–û—Ç –º–æ—Ä—è'
                else: data['opposite'] = '–ö –º–æ—Ä—é'
                # # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                await remove_messages(callback.from_user.id, data['msg'])

        msg = await callback.message.answer('–í—ã–±–µ—Ä–µ—Ç–µ –∫–æ–ª-–≤–æ –º–µ—Å—Ç', reply_markup=kb_seat)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ò–î —Å–æ–æ–±—â–µ–Ω–∏—è
        await update_msg_list([msg.message_id], state)
        await callback.answer()
    else:
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        async with state.proxy() as data:
            await remove_messages(callback.from_user.id, data['msg'])

        await callback.answer()
        await state.finish()
        await callback.message.answer('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω', reply_markup=kb_pass)

# –í—ã–±–æ—Ä –∫–æ–ª-–≤–∞ –º–µ—Å—Ç
async def menu_seat_selection(callback: types.CallbackQuery, state: FSMContext):
    if callback.data != '–û—Ç–º–µ–Ω–∞':
        await FSMOrder_trip.s_geolocation.set()
        async with state.proxy() as data:
                data['seat'] = callback.data
                # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                await remove_messages(callback.from_user.id, data['msg'])
        msg_seats = await callback.message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {callback.data} –º–µ—Å—Ç(–∞)')
        if data['route'] == '–ö –º–æ—Ä—é':
            msg = await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ  –±–ª–∏–∑–∫–æ–µ –∫ –≤–∞–º –º–µ—Å—Ç–æ –ø–æ—Å–∞–¥–∫–∏', reply_markup=kb_geoposition)
        if data['route'] == '–û—Ç –º–æ—Ä—è':
            msg = await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–∏–∂–∞–π—à—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∫ –í–∞—à–µ–º—É –¥–æ–º—É', reply_markup=kb_geoposition)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ò–î —Å–æ–æ–±—â–µ–Ω–∏—è
        await update_msg_list([msg.message_id, msg_seats.message_id], state)
        await callback.answer()
    else:
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        async with state.proxy() as data:
            await remove_messages(callback.from_user.id, data['msg'])
        await callback.answer()
        await state.finish()
        await callback.message.answer('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω', reply_markup=kb_pass)    

# –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è
async def menu_pp_confirm(callback: types.CallbackQuery, state: FSMContext):
    if callback.data != '–û—Ç–º–µ–Ω–∞':
        if callback.data != '–ù–∞–∑–∞–¥':
            await FSMOrder_trip.s_pp_confirmation.set()
            async with state.proxy() as data:
                # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                await remove_messages(callback.from_user.id, data['msg'])
                # –ï—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç –∫ –º–æ—Ä—é
                if data['route'] == '–ö –º–æ—Ä—é':
                    data['pickup_point'] = callback.data
                    data['drop_point'] = '–£—Å–ø–µ–Ω—Å–∫–∞—è —Ü–µ—Ä–∫–æ–≤—å'
                # –ï—Å–ª–∏ –æ—Ç –º–æ—Ä—è
                if data['route'] == '–û—Ç –º–æ—Ä—è':
                    data['pickup_point'] = '–£—Å–ø–µ–Ω—Å–∫–∞—è —Ü–µ—Ä–∫–æ–≤—å'
                    data['drop_point'] = callback.data
            pp_location = await crimgo_db.get_pp_location(callback.data, data['route'])
            msg_location = await bot.send_location(chat_id=callback.from_user.id, latitude=pp_location[0], longitude=pp_location[1])
            async with state.proxy() as data:
                data['msg_location'] = [msg_location.message_id]
            if data['route'] == '–ö –º–æ—Ä—é':
                msg = await callback.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫—É {pp}, –Ω–∞–∂–º–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'.format(pp = data['pickup_point']), reply_markup=kb_pp_confirmation)
            if data['route'] == '–û—Ç –º–æ—Ä—è':
                msg = await callback.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫—É {dp}, –Ω–∞–∂–º–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'.format(dp = data['drop_point']), reply_markup=kb_pp_confirmation)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ò–î —Å–æ–æ–±—â–µ–Ω–∏—è
            await update_msg_list([msg.message_id], state)
        else:
            async with state.proxy() as data:
                # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                await remove_messages(callback.from_user.id, data['msg'])
            await FSMOrder_trip.s_seat_selection.set()
            msg = await callback.message.answer('–í—ã–±–µ—Ä–µ—Ç–µ –∫–æ–ª-–≤–æ –º–µ—Å—Ç', reply_markup=kb_seat)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ò–î —Å–æ–æ–±—â–µ–Ω–∏—è
            await update_msg_list([msg.message_id], state)
        await callback.answer()
    else:
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        async with state.proxy() as data:
            await remove_messages(callback.from_user.id, data['msg'])
        await callback.answer()
        await state.finish()
        await callback.message.answer('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω', reply_markup=kb_pass)

# –í—ã–±–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
async def menu_trip_confirm(callback: types.CallbackQuery, state: FSMContext):
    if callback.data != '–û—Ç–º–µ–Ω–∞':
        if callback.data != '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å':
            await FSMOrder_trip.s_trip_confirmation.set()
            async with state.proxy() as data:
                    data['pp_confirm'] = callback.data
                    # –ò—â–µ–º —Ü–µ–Ω–∞ –±–∏–ª–µ—Ç–∞ –∏ —Å—á–∏—Ç–∞–µ–º –∏—Ç–æ–≥
                    price = await crimgo_db.get_pickup_point_price(data['pickup_point'], data['route'])
                    if price is not None: 
                        data['total_amount'] = int(data['seat'])*price
                    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    await remove_messages(callback.from_user.id, data['msg'])
            #########
            #########
            # –µ—Å–ª–∏ –Ω–µ—Ç trip —Å —É–∫–∞–∑–∞–Ω—ã–º –º–∞—Ä—à—Ä—É—Ç–æ–º, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            trip_id = await crimgo_db.is_trip_with_route(state)
            if (trip_id is None):
                trip_id = await crimgo_db.create_trip(state)
                # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å 
                if (trip_id is False):
                    msg = await callback.message.answer('–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ò–î —Å–æ–æ–±—â–µ–Ω–∏—è
                    await update_msg_list([msg.message_id], state)
                    await callback.answer()
                    await state.finish()
                else:
                    async with state.proxy() as data:
                        data['trip_id'] = trip_id 
            else:
                async with state.proxy() as data:
                    data['trip_id'] = trip_id 
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–µ–Ω –ª–∏ –ø—É—à, –µ—Å–ª–∏ None, route –±–ª–∏–∂–µ–π—à–µ–≥–æ —à–∞—Ç—Ç–ª–∞ –Ω–µ —Ä–∞–≤–Ω–æ data['route'] –±–∏–ª–µ—Ç–∞
            is_push_needed = await crimgo_db.is_push_needed(state)
            if is_push_needed is None:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ –ø–æ–µ–∑–¥–∫–µ, –ø—Ä–∏–±–∞–≤—è–ª–µ–º 30 –º–∏–Ω—É—Ç—É
                ADD_DELTA_TIME = timedelta(minutes = 30)
                await crimgo_db.update_trip_set_time_delta(state, ADD_DELTA_TIME)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª-–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç
            if (await crimgo_db.seat_availability(state)) is True:
                aprox_time = await crimgo_db.calculate_raw_pickup_time(state)
                async with state.proxy() as data:
                    data['aprox_time'] = aprox_time
                msg = await callback.message.answer('–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–∞–¥–∫–∏ –≤ —à–∞—Ç—Ç–ª - {time}. –ù–∞–∂–º–∏—Ç–µ –û–ö –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ'.format(time = aprox_time), reply_markup=kb_trip_confirmation)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ò–î —Å–æ–æ–±—â–µ–Ω–∏—è
                await update_msg_list([msg.message_id], state)
                await callback.answer()
            else:
#               if trip_id is None or False:
                await callback.message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–æ–ª-–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–º —Ä–µ–π—Å–µ.', reply_markup=kb_pass)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ò–î —Å–æ–æ–±—â–µ–Ω–∏—è
                await update_msg_list([msg.message_id], state)
                await callback.answer()
                await state.finish()
        else:
            await FSMOrder_trip.s_geolocation.set()
            await callback.answer()
            async with state.proxy() as data:
                route = data['route']
            if route == '–ö –º–æ—Ä—é':
                msg = await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ  –±–ª–∏–∑–∫–æ–µ –∫ –≤–∞–º –º–µ—Å—Ç–æ –ø–æ—Å–∞–¥–∫–∏', reply_markup=kb_geoposition)
            if route == '–û—Ç –º–æ—Ä—è':
                msg = await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–∏–∂–∞–π—à—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∫ –í–∞—à–µ–º—É –¥–æ–º—É', reply_markup=kb_geoposition)
            async with state.proxy() as data:
                # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                await remove_messages(callback.from_user.id, data['msg'])
                await remove_messages(callback.from_user.id, data['msg_location'])
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ò–î —Å–æ–æ–±—â–µ–Ω–∏—è
            await update_msg_list([msg.message_id], state)
    else:
        async with state.proxy() as data:
            # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await remove_messages(callback.from_user.id, data['msg'])
            await remove_messages(callback.from_user.id, data['msg_location'])
        await callback.answer()
        await state.finish()
        await callback.message.answer('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω', reply_markup=kb_pass)

# –ë—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
async def menu_payment_type(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == '–û–∫':
        await FSMOrder_trip.s_payment_type.set()
        async with state.proxy() as data:
            data['trip_confirm'] = callback.data
            # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await remove_messages(callback.from_user.id, data['msg'])
        msg = await callback.message.answer('–í—ã –∑–∞–∫–∞–∑–∞–ª–∏ {seat} –º–µ—Å—Ç(–∞), —Å—Ç–æ–∏–º–æ—Å—Ç—å {total_amount} —Ä—É–±–ª–µ–π'.format(seat = data['seat'], total_amount= data['total_amount']), reply_markup=kb_payment_type)
        await update_msg_list([msg.message_id], state)
    else:
        await crimgo_db.restore_booked_seats(state)
        await callback.message.answer('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω')
        await state.finish()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –∏ –≤—ã–±–æ—Ä —Å–æ–æ—Ç-–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
async def menu_handle_payment(callback: types.CallbackQuery, state: FSMContext):          
    await callback.answer()
    # –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–∫–æ–π
    if callback.data == '–ù–∞–ª–∏—á–∫–æ–π –≤–æ–¥–∏—Ç–µ–ª—é':
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –ø–æ–ª—è –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–ª–∏—á–∫–æ–π
        async with state.proxy() as data:
            data['payment_type'] = 'cash'
            data['telegram_payment_charge_id'] = 'null'
            data['provider_payment_charge_id'] = 'null'
            data['otp'] = randrange(1000, 9999, 1)
            data['pass_id'] = callback.from_user.id
            # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await remove_messages(callback.from_user.id, data['msg'])
        
        payment_id = await crimgo_db.successful_payment(state)
        total_amount = await crimgo_db.get_total_amount(payment_id)
        msg = await callback.message.answer('–û–ø–ª–∞—Ç–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—é —Å—É–º–º—É `{total_amount}` –†–£–ë –ø—Ä–∏ –ø–æ—Å–∞–¥–∫–µ! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º CrimGo. –ö–æ–¥ –¥–ª—è –ø–æ—Å–∞–¥–∫–∏ `{otp}`'.format(total_amount=total_amount, otp=data['otp']))
        # –ó–∞–ø–∏—Å—å –≤ –ë–î –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—É—à–∞ –ø–∞—Å—Å–∞–∂–∏—Ä—É
        await crimgo_db.save_pass_message_id(callback.from_user.id, msg.message_id, msg.chat.id)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–µ–Ω –ª–∏ –ø—É—à, –µ—Å–ª–∏ None, route –±–ª–∏–∂–µ–π—à–µ–≥–æ —à–∞—Ç—Ç–ª–∞ –Ω–µ —Ä–∞–≤–Ω–æ data['route'] –±–∏–ª–µ—Ç–∞
        is_push_needed = await crimgo_db.is_push_needed(state)
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–∏–ª–µ—Ç–∞ –≤ –ë–î       
        ticket_id = await crimgo_db.create_ticket(state, payment_id)
        # –ü–µ—Ä–µ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–µ–∑–¥–∫–∏
        await crimgo_db.trip_status_review(state)
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ –¥–ª—è –ø—É—à–∞ –≤–æ–¥–∏—Ç–µ–ª—é
        driver_chat_id = await crimgo_db.get_driver_chat_id(state)
        
        # –ü—É—à –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è
        if is_push_needed:
            await push_messages(callback.from_user.id, state, ticket_id, driver_chat_id)
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
            if data['route'] == '–ö –º–æ—Ä—é':
                text = '–û—Å—Ç. {pickup_point}, {pickup_time}, {seats}–º'.format(pickup_point = data['pickup_point'], pickup_time = data['aprox_time'], seats = data['seat'])    
            if data['route'] == '–û—Ç –º–æ—Ä—è':
                ticket_dp_time = await crimgo_db.ticket_dp_time(ticket_id)
                text = '–û—Å—Ç. {pickup_point}, {pickup_time}, {seats}–º'.format(pickup_point = data['drop_point'], pickup_time = (ticket_dp_time + config.TIME_OFFSET).strftime("%H:%M"), seats = data['seat'])    
                #msg = await bot.send_message(driver_chat_id[0], text, reply_markup=kb_start_trip)
            # await crimgo_db.set_shuttle_message_id(msg.message_id, state)
            await crimgo_db.save_message_id_and_text(state, text)

        await state.finish()

# –ü—É—à –≤–æ–¥–∏—Ç–µ–ª—é –∏–ª–∏ –ø–∞—Å–∞–∂–∞—Ä—É
async def push_messages(user_id, state, ticket_id, driver_chat_id):
    async with state.proxy() as data:
            # –ï—Å–ª–∏ —á–∞—Ç ID –Ω–µ –ø—É—Å—Ç
        if driver_chat_id[0] is not None:
            is_first_ticket = await crimgo_db.is_first_ticket(state)
            # –ü–µ—Ä–≤—ã–π –±–∏–ª–µ—Ç –≤ —Ä–µ–π—Å–µ
            if is_first_ticket is True:
                trip_details = await crimgo_db.trip_details(state)
                await bot.send_message(driver_chat_id[0], '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —Ä–µ–π—Å {trip_id} "{route}". –°—Ç–∞—Ä—Ç –≤ {start_time}'.format(trip_id = trip_details[0], route = trip_details[1], start_time = (config.TIME_OFFSET + trip_details[2]).strftime("%H:%M")), reply_markup=kb_driver_shift)
                if data['route'] == '–ö –º–æ—Ä—é':
                    text = '–û—Å—Ç. {pickup_point}, {pickup_time}, {seats}–º'.format(pickup_point = data['pickup_point'], pickup_time = data['aprox_time'], seats = data['seat'])    
                if data['route'] == '–û—Ç –º–æ—Ä—è':
                    ticket_dp_time = await crimgo_db.ticket_dp_time(ticket_id)
                    text = '–û—Å—Ç. {pickup_point}, {pickup_time}, {seats}–º'.format(pickup_point = data['drop_point'], pickup_time = (ticket_dp_time + config.TIME_OFFSET).strftime("%H:%M"), seats = data['seat'])    
                msg = await bot.send_message(driver_chat_id[0], text, reply_markup=kb_start_trip)
                await crimgo_db.set_shuttle_message_id(msg.message_id, state)
                await crimgo_db.save_message_id_and_text(state, text)

                # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–æ–µ–∑–¥–∫–∏ –ø–æ–º–µ–Ω—è–ª—Å—è 
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–π—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—é –∏ –ø–∞—Å—Å–∞–∂–∏—Ä—É –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—á–∞–ª–∞ —Ä–µ–π—Å–∞
                status = await crimgo_db.trip_status(state)
                if status == 'scheduled':
                    start_time = await crimgo_db.get_trip_start_time_by_id(state)
                    # –ï—Å–ª–∏ –∫ –º–æ—Ä—é —Ç–æ —Å–æ–±–∏—Ä–∞–µ–º —Å–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ pickup_point 
                    if data['route'] == '–ö –º–æ—Ä—é':
                        tickets = await crimgo_db.get_dict_of_tickets_by_trip(state)
                        text = '–í–Ω–∏–º–∞–Ω–∏–µ, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–æ —Ä–µ–π—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {start_time}\n'.format(start_time = (start_time + config.TIME_OFFSET).strftime("%H:%M"))
                        # –°–æ–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        for i in tickets:
                            text = text + '–û—Å—Ç. {pp}, {time}, {seats}–º\n'.format(pp = i[0], time = (i[2] + config.TIME_OFFSET).strftime("%H:%M"), seats = i[1])
                    # –ï—Å–ª–∏ –æ—Ç –º–æ—Ä—è —Ç–æ —Å–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ drop_point
                    if data['route'] == '–û—Ç –º–æ—Ä—è':
                        drop_point = await crimgo_db.get_dict_of_drop_points_by_trip(state)
                        text = '–í–Ω–∏–º–∞–Ω–∏–µ, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–æ —Ä–µ–π—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {start_time}\n'.format(start_time = (start_time + config.TIME_OFFSET).strftime("%H:%M"))
                        # –°–æ–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        for i in drop_point:
                            text = text + '–û—Å—Ç. {pp}, {time}, {seats}–º\n'.format(pp = i[0], time = (i[2] + config.TIME_OFFSET).strftime("%H:%M"), seats = i[1])
                   
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —á–∞—Ç –ò–î
                    driver_chat_id = await crimgo_db.get_driver_chat_id(state)

                    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ(—É–¥–∞–ª—è–µ–º/–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º)
                    # await bot.edit_message_text(chat_id = driver_chat_id[0], message_id = driver_chat_id[1], text = text, reply_markup=kb_start_trip)
                    await bot.delete_message(chat_id = driver_chat_id[0], message_id = driver_chat_id[1])
                    updated_msg = bot.send_message(chat_id = driver_chat_id[0], text = text, reply_markup = kb_start_trip)
                    await crimgo_db.set_shuttle_message_id(updated_msg.message_id, state)
                    await crimgo_db.save_message_id_and_text(state, text)


                    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    pass_trip_details = await crimgo_db.get_pass_trip_details(state)
                    for push in pass_trip_details:
                        try: 
                            text = '–í–Ω–∏–º–∞–Ω–∏–µ, –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–∞–¥–∫–∏: {time}\n–ú–µ—Å—Ç–æ –ø–æ—Å–∞–¥–∫–∏: {pp}\n–ö–æ–¥ –ø–æ—Å–∞–¥–∫–∏: {otp}'.format(time = (push[2]).strftime("%H:%M"), pp = push[3], otp = push[4])
                            await bot.delete_message(chat_id = push[0], message_id = push[1])
                            updated_msg = await bot.send_message(chat_id = push[0], text = text, reply_markup = None)
                            # –ó–∞–ø–∏—Å—å –≤ –ë–î –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—É—à–∞ –ø–∞—Å—Å–∞–∂–∏—Ä—É
                            await crimgo_db.save_pass_message_id(user_id, updated_msg.message_id, updated_msg.chat.id)
                            # await bot.edit_message_text(chat_id = push[0], message_id = push[1], text = text, reply_markup=None)
                        except (Exception) as error:
                            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ", error)
                        # text = '–í–Ω–∏–º–∞–Ω–∏–µ, –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–∞–¥–∫–∏: {time}\n–ú–µ—Å—Ç–æ –ø–æ—Å–∞–¥–∫–∏: {pp}\n–ö–æ–¥ –ø–æ—Å–∞–¥–∫–∏: {otp}'.format(time = (push[2]).strftime("%H:%M"), pp = push[3], otp = push[4])
                        # await bot.edit_message_text(chat_id = push[0], message_id = push[1], text = text, reply_markup=None)                

            else:
                # –ù–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è –æ –Ω–æ–≤—ã—Ö –±–∏–ª–µ—Ç–∞—Ö
                tmp = await crimgo_db.get_message_id_and_text(state)
                if tmp is None: 
                    tmp = ''
                if data['route'] == '–ö –º–æ—Ä—é':
                    text = tmp + '\n–û—Å—Ç. {pickup_point}, {pickup_time}, {seats}–º'.format(pickup_point = data['pickup_point'], pickup_time = data['aprox_time'], seats = data['seat'])    
                if data['route'] == '–û—Ç –º–æ—Ä—è':
                    ticket_dp_time = await crimgo_db.ticket_dp_time(ticket_id)
                    text = tmp + '\n–û—Å—Ç. {pickup_point}, {pickup_time}, {seats}–º'.format(pickup_point = data['drop_point'], pickup_time = (ticket_dp_time + config.TIME_OFFSET).strftime("%H:%M"), seats = data['seat'])    
                await bot.edit_message_text(chat_id = driver_chat_id[0], message_id = driver_chat_id[1], text = text, reply_markup=kb_start_trip)
                await crimgo_db.save_message_id_and_text(state, text)
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–π—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—é –∏ –ø–∞—Å—Å–∞–∂–∏—Ä—É –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—á–∞–ª–∞ —Ä–µ–π—Å–∞
                status = await crimgo_db.trip_status(state)
                if status == 'scheduled':
                    start_time = await crimgo_db.get_trip_start_time_by_id(state)
                    # –ï—Å–ª–∏ –∫ –º–æ—Ä—é —Ç–æ —Å–æ–±–∏—Ä–∞–µ–º —Å–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ pickup_point 
                    if data['route'] == '–ö –º–æ—Ä—é':
                        tickets = await crimgo_db.get_dict_of_tickets_by_trip(state)
                        text = '–í–Ω–∏–º–∞–Ω–∏–µ, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–æ —Ä–µ–π—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {start_time}\n'.format(start_time = (start_time + config.TIME_OFFSET).strftime("%H:%M"))
                        # –°–æ–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        for i in tickets:
                            text = text + '–û—Å—Ç. {pp}, {time}, {seats}–º\n'.format(pp = i[0], time = (i[2] + config.TIME_OFFSET).strftime("%H:%M"), seats = i[1])
                    # –ï—Å–ª–∏ –æ—Ç –º–æ—Ä—è —Ç–æ —Å–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ drop_point
                    if data['route'] == '–û—Ç –º–æ—Ä—è':
                        drop_point = await crimgo_db.get_dict_of_drop_points_by_trip(state)
                        text = '–í–Ω–∏–º–∞–Ω–∏–µ, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–æ —Ä–µ–π—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {start_time}\n'.format(start_time = (start_time + config.TIME_OFFSET).strftime("%H:%M"))
                        # –°–æ–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        for i in drop_point:
                            text = text + '–û—Å—Ç. {pp}, {time}, {seats}–º\n'.format(pp = i[0], time = (i[2] + config.TIME_OFFSET).strftime("%H:%M"), seats = i[1])
                   
                    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    # await bot.edit_message_text(chat_id = driver_chat_id[0], message_id = driver_chat_id[1], text = text, reply_markup=kb_start_trip)
                    await bot.delete_message(chat_id = driver_chat_id[0], message_id = driver_chat_id[1])
                    updated_msg = await bot.send_message(chat_id = driver_chat_id[0], text = text, reply_markup = kb_start_trip)
                    await crimgo_db.set_shuttle_message_id(updated_msg.message_id, state)
                    await crimgo_db.save_message_id_and_text(state, text)

                    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    pass_trip_details = await crimgo_db.get_pass_trip_details(state)
                    for push in pass_trip_details:
                        try: 
                            text = '–í–Ω–∏–º–∞–Ω–∏–µ, –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–∞–¥–∫–∏: {time}\n–ú–µ—Å—Ç–æ –ø–æ—Å–∞–¥–∫–∏: {pp}\n–ö–æ–¥ –ø–æ—Å–∞–¥–∫–∏: {otp}'.format(time = (push[2]).strftime("%H:%M"), pp = push[3], otp = push[4])
                            await bot.delete_message(chat_id = push[0], message_id = push[1])
                            updated_msg = await bot.send_message(chat_id = push[0], text = text, reply_markup = None)
                            # –ó–∞–ø–∏—Å—å –≤ –ë–î –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—É—à–∞ –ø–∞—Å—Å–∞–∂–∏—Ä—É
                            await crimgo_db.save_pass_message_id(user_id, updated_msg.message_id, updated_msg.chat.id)
                            # await bot.edit_message_text(chat_id = push[0], message_id = push[1], text = text, reply_markup=None)
                        except (Exception) as error:
                            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ", error)

# –£–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–ø–∏—Å–∫–µ msg_id_list
async def remove_messages(chat_id, msg_id_list):
    for msg in msg_id_list:
        await bot.delete_message(chat_id=chat_id, message_id=msg)

# –î–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ data['msg']
async def update_msg_list(msg_id_list, state: FSMContext):
    async with state.proxy() as data:
        # –ü—É—Å—Ç–æ–π –ª–∏—Å—Ç
        msg_list = []
        # –î–æ–±–∞–≤–ª—è–µ–º –ò–î –≤ —Å–ø–∏—Å–æ–∫
        msg_list.extend(msg_id_list)
        data['msg'] = msg_list

def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(commands_start, commands=['start', 'help'])
    dp.register_message_handler(get_contact, content_types=['contact'])
    dp.register_message_handler(cmd_order_trip, Text(equals='–ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–µ–∑–¥–∫—É', ignore_case=True))
    dp.register_message_handler(cmd_contact_with_support, Text(equals='–ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏', ignore_case=True))
    dp.register_callback_query_handler(menu_route_selection, state=FSMOrder_trip.s_route_selection)
    dp.register_callback_query_handler(menu_seat_selection, state=FSMOrder_trip.s_seat_selection)
    dp.register_callback_query_handler(menu_pp_confirm, state=FSMOrder_trip.s_geolocation)
    dp.register_callback_query_handler(menu_trip_confirm, state=FSMOrder_trip.s_pp_confirmation)
    dp.register_callback_query_handler(menu_payment_type, state=FSMOrder_trip.s_trip_confirmation)
    dp.register_callback_query_handler(menu_handle_payment, state=FSMOrder_trip.s_payment_type)
