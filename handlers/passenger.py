from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types.message import ContentType
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from datetime import datetime, timedelta

from create_bot import dp, bot
from database import crimgo_db
from keyboards import kb_pass, kb_driver, kb_path, kb_seat, kb_geoposition, kb_pp_confirmation, kb_trip_confirmation, kb_payment_type, kb_driver_shift, kb_generic_start, kb_start_trip, kb_onboarding_trip


from random import randrange

from config import config

# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞
class FSMOrder_trip(StatesGroup):
    s_route_selection = State()
    s_seat_selection = State()
    s_geolocation = State()
    s_pp_confirmation = State()
    s_trip_confirmation = State()
    s_payment_type = State()

# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
class FSMOrder_subscribe(StatesGroup):
    s_payment_subscribe = State()

# –°—Ç–∞—Ä—Ç –∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
async def commands_start(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è
    if (await crimgo_db.is_driver_exist(message) is not None):
        # –ï—Å–ª–∏ –≤–∞–ª–∏–¥–µ–Ω
        if (await crimgo_db.is_driver_valid(message) is True):
            # –¢–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–µ–Ω—É
            if (await crimgo_db.is_on_shift(message)): 
                await message.reply('–î–æ–±—Ä—ã–π –¥–µ–Ω—å', reply_markup=kb_driver_shift)
            else: 
                await message.reply('–î–æ–±—Ä—ã–π –¥–µ–Ω—å', reply_markup=kb_driver)
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    else:
        if await crimgo_db.is_exist(message) is True:
            await message.reply('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã\n–≠—Ç–æ –±–æ—Ç CrimGo. –Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–∫–∞–∑–∞—Ç—å –ø–æ–µ–∑–¥–∫—É. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.', reply_markup=kb_pass)
        if await crimgo_db.is_exist(message) is False:          
            await message.reply('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã\n–≠—Ç–æ –±–æ—Ç CrimGo. –Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–∫–∞–∑–∞—Ç—å –ø–æ–µ–∑–¥–∫—É. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.', reply_markup=kb_generic_start)
        await message.answer('https://teletype.in/@crimgo.ru/3lGEr343Vj2')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
async def get_contact(message: types.Message):
    # If not exist, create a user
    await crimgo_db.create_user(message)
    await message.answer('–°–ø–∞—Å–∏–±–æ', reply_markup=kb_pass)

# –ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
async def cmd_contact_with_support(message: types.Message):
    await message.reply(message.text)

# –ü–æ–∫—É–ø–∫–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
async def cmd_subscription(message: types.Message, state: FSMContext):
    await FSMOrder_subscribe.s_payment_subscribe.set()
    await message.answer('–ü–æ–∫—É–ø–∫–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –Ω–∞ 10 –ø–æ–µ–∑–¥–æ–∫.', reply_markup=kb_pass)
    async with state.proxy() as data:
            data['seat'] = '12'
            data['total_amount'] = '1000'
    await message.reply('–ü–æ–∫—É–ø–∫–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞') 
    if config.PAYMENTS_PROVIDER_TOKEN.split(':')[1] == 'TEST':
                 await bot.send_message(message.chat.id, '–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–∫—É–ø–∞')

    await bot.send_invoice(message.chat.id,
                       title='–ü–æ–∫—É–ø–∫–∞ –æ–±–æ–Ω–µ–º–µ–Ω—Ç–∞',
                       description=('–ü–æ–∫—É–ø–∫–∞ {seat} –±–∏–ª–µ—Ç–∞(–æ–≤)'.format(seat=data['seat'])),
                       provider_token=config.PAYMENTS_PROVIDER_TOKEN,
                       currency='rub',
                       photo_url=config.SHUTTLE_IMAGE_URL,
                       photo_height=512,  # !=0/None, –∏–Ω–∞—á–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–∫–∞–∂–µ—Ç—Å—è
                       photo_width=512,
                       photo_size=512,
                       is_flexible=False,  # True –µ—Å–ª–∏ –∫–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
                       prices=[types.LabeledPrice(label='–ë–∏–ª–µ—Ç(—ã) –Ω–∞ —à–∞—Ç—Ç–ª', amount=(int(data['total_amount'])*100))],
                       start_parameter='shuttle-order-example',
                       payload='some-invoice-payload-for-our-internal-use'
                       )

@dp.pre_checkout_query_handler(lambda query: True, state=FSMOrder_subscribe.s_payment_subscribe)
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT, state=FSMOrder_subscribe.s_payment_subscribe)
async def process_successful_payment(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ
        data['payment_type'] = 'card'
        data['total_amount'] = message.successful_payment.total_amount // 100
        data['telegram_payment_charge_id'] = message.successful_payment.telegram_payment_charge_id
        data['provider_payment_charge_id'] = message.successful_payment.provider_payment_charge_id
        data['pass_id'] = message.from_user.id
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            message.chat.id,
            '–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É `{total_amount} {currency}` —Å–æ–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º CrimGo.'.format(
            total_amount=data['total_amount'],
            currency=message.successful_payment.currency
            )
        )
    # –ó–∞–ø–∏—Å—å –≤ –ë–î –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ FSM    
    await crimgo_db.successful_payment(state)
    await state.finish()

# –ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–∞
async def cmd_order_trip(message: types.Message):
    await FSMOrder_trip.s_route_selection.set()
    await message.answer('–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª–∞ –ø–æ–µ–∑–¥–∫–∏ 20 –º–∏–Ω—É—Ç. –ë–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –±—É–¥–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω–æ –ø–æ–∑–∂–µ.', reply_markup=kb_path) 

# –í—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞
async def menu_route_selection(callback: types.CallbackQuery, state: FSMContext):
    await FSMOrder_trip.s_seat_selection.set()
    async with state.proxy() as data:
            data['route'] = callback.data
    await callback.message.answer('–í—ã–±–µ—Ä–µ—Ç–µ –∫–æ–ª-–≤–æ –º–µ—Å—Ç', reply_markup=kb_seat)
    await callback.answer()


# –í—ã–±–æ—Ä –∫–æ–ª-–≤–∞ –º–µ—Å—Ç
async def menu_seat_selection(callback: types.CallbackQuery, state: FSMContext):
    await FSMOrder_trip.s_geolocation.set()
    async with state.proxy() as data:
            data['seat'] = callback.data
            data['total_amount'] = int(data['seat'])*100
    await callback.message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {callback.data} –º–µ—Å—Ç(–∞)')
    if data['route'] == '–ö –º–æ—Ä—é':
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ  –±–ª–∏–∑–∫–æ–µ –∫ –≤–∞–º –º–µ—Å—Ç–æ –ø–æ—Å–∞–¥–∫–∏', reply_markup=kb_geoposition)
    if data['route'] == '–û—Ç –º–æ—Ä—è':
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–∏–∂–∞–π—à—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∫ –í–∞—à–µ–º—É –¥–æ–º—É', reply_markup=kb_geoposition)
    await callback.answer()

# –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è
async def menu_pp_confirm(callback: types.CallbackQuery, state: FSMContext):
    if callback.data != '–ù–∞–∑–∞–¥':
        await FSMOrder_trip.s_pp_confirmation.set()
        async with state.proxy() as data:
                data['geo'] = callback.data
        pp_location = await crimgo_db.get_pp_location(callback.data, data['route'])
        await bot.send_location(chat_id=callback.from_user.id, latitude=pp_location[0], longitude=pp_location[1])
        await callback.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫—É {pp}, –Ω–∞–∂–º–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'.format(pp = data['geo']), reply_markup=kb_pp_confirmation)
    else:
        await FSMOrder_trip.s_seat_selection.set()
        await callback.message.answer('–í—ã–±–µ—Ä–µ—Ç–µ –∫–æ–ª-–≤–æ –º–µ—Å—Ç', reply_markup=kb_seat)
    await callback.answer()

# –í—ã–±–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
async def menu_trip_confirm(callback: types.CallbackQuery, state: FSMContext):
    if callback.data != '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å':
        await FSMOrder_trip.s_trip_confirmation.set()
        async with state.proxy() as data:
                data['pp_confirm'] = callback.data
        
        #########
        #########
        # –µ—Å–ª–∏ –Ω–µ—Ç trip —Å —É–∫–∞–∑–∞–Ω—ã–º –º–∞—Ä—à—Ä—É—Ç–æ–º, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        trip_id = await crimgo_db.is_trip_with_route(state)
        if (trip_id is None):
            trip_id = await crimgo_db.create_trip(state)
            if (trip_id is False):
                await callback.message.answer('–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
                await callback.answer()
                await state.finish()
            else:
                async with state.proxy() as data:
                    data['trip_id'] = trip_id 
        else:
            async with state.proxy() as data:
                data['trip_id'] = trip_id 

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª-–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç
        if (await crimgo_db.seat_availability(state)) is True:
            aprox_time = await crimgo_db.calculate_raw_pickup_time(state)
            async with state.proxy() as data:
                data['aprox_time'] = aprox_time
            await callback.message.answer('–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–∞–¥–∫–∏ –≤ —à–∞—Ç—Ç–ª - {time}. –ù–∞–∂–º–∏—Ç–µ –û–ö –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ'.format(time = aprox_time), reply_markup=kb_trip_confirmation)
            await callback.answer()
        else:
            if trip_id is None or False:
                await callback.message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–æ–ª-–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç', reply_markup=kb_path)
            await callback.answer()
            await state.finish()
    else:
        await FSMOrder_trip.s_geolocation.set()
        await callback.answer()
        async with state.proxy() as data:
            route = data['route']
        if route == '–ö –º–æ—Ä—é':
            await callback.message.answer('–í—ã–±–∏—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ  –±–ª–∏–∑–∫–æ–µ –∫ –≤–∞–º –º–µ—Å—Ç–æ –ø–æ—Å–∞–¥–∫–∏', reply_markup=kb_geoposition)
        if route == '–û—Ç –º–æ—Ä—è':
            await callback.message.answer('–í—ã–±–∏—Ä–∏—Ç–µ –±–ª–∏–∂–∞–π—à—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∫ –í–∞—à–µ–º—É –¥–æ–º—É', reply_markup=kb_geoposition)

# –ë—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
async def menu_payment_type(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == '–û–∫':
        await FSMOrder_trip.s_payment_type.set()
        async with state.proxy() as data:
            data['trip_confirm'] = callback.data
        await callback.message.answer('–í—ã –∑–∞–∫–∞–∑–∞–ª–∏ {seat} –º–µ—Å—Ç(–∞), —Å—Ç–æ–∏–º–æ—Å—Ç—å {total_amount} —Ä—É–±–ª–µ–π'.format(seat = data['seat'], total_amount= data['total_amount']), reply_markup=kb_payment_type)
    else:
        await crimgo_db.restore_booked_seats(state)
        await callback.message.answer('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω')
        await state.finish()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –∏ –≤—ã–±–æ—Ä —Å–æ–æ—Ç-–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
async def menu_handle_payment(callback: types.CallbackQuery, state: FSMContext):          
    await callback.answer()
    # –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–∫–æ–π
    if callback.data == '–ù–∞–ª–∏—á–∫–æ–π –≤–æ–¥–∏—Ç–µ–ª—é':
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –ø–æ–ª—è –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–ª–∏—á–∫–æ–π
        async with state.proxy() as data:
            data['payment_type'] = 'cash'
            data['telegram_payment_charge_id'] = 'null'
            data['provider_payment_charge_id'] = 'null'
            data['otp'] = randrange(1000, 9999, 1)
            data['pass_id'] = callback.from_user.id

        payment_id = await crimgo_db.successful_payment(state)
        await callback.message.answer('–û–ø–ª–∞—Ç–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—é —Å—É–º–º—É `{total_amount}` –†–£–ë –ø—Ä–∏ –ø–æ—Å–∞–¥–∫–µ! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º CrimGo. –ö–æ–¥ –¥–ª—è –ø–æ—Å–∞–¥–∫–∏ `{otp}`'.format(
            total_amount=int(data['seat'])*100, otp=data['otp']))
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–∏–ª–µ—Ç–∞ –≤ –ë–î       
        ticket_id = await crimgo_db.create_ticket(state, payment_id)
        # –ü–µ—Ä–µ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–µ–∑–¥–∫–∏
        await crimgo_db.trip_status_review(state)
        # –ü—É—à –≤–æ–¥–∏—Ç–µ–ª—é
        driver_chat_id = await crimgo_db.get_driver_chat_id(state)
        # –ï—Å–ª–∏ —á–∞—Ç ID –Ω–µ –ø—É—Å—Ç
        if driver_chat_id[0] is not None:
            is_first_ticket = await crimgo_db.is_first_ticket(state)
            # –ü–µ—Ä–≤—ã–π –±–∏–ª–µ—Ç –≤ —Ä–µ–π—Å–µ
            if is_first_ticket is True:
                trip_details = await crimgo_db.trip_details(state)
                await bot.send_message(driver_chat_id[0], '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —Ä–µ–π—Å {trip_id} "{route}". –°—Ç–∞—Ä—Ç –≤ {start_time}'.format(trip_id = trip_details[0], route = trip_details[1], start_time = (config.TIME_OFFSET + trip_details[2]).strftime("%H:%M")), reply_markup=kb_driver_shift)
                if data['route'] == '–ö –º–æ—Ä—é':
                    text = '–û—Å—Ç. {pickup_point}, {pickup_time}, {seats}–º'.format(pickup_point = data['geo'], pickup_time = data['aprox_time'], seats = data['seat'])    
                if data['route'] == '–û—Ç –º–æ—Ä—è':
                    ticket_pp_time = await crimgo_db.ticket_pp_time(ticket_id)
                    text = '–û—Å—Ç. {pickup_point}, {pickup_time}, {seats}–º'.format(pickup_point = data['geo'], pickup_time = (ticket_pp_time + config.TIME_OFFSET).strftime("%H:%M"), seats = data['seat'])    
                msg = await bot.send_message(driver_chat_id[0], text, reply_markup=kb_start_trip)
                await crimgo_db.set_shuttle_message_id(msg.message_id, state)
                await crimgo_db.save_message_id_and_text(state, text)
            else:
                # –ù–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è –æ –Ω–æ–≤—ã—Ö –±–∏–ª–µ—Ç–∞—Ö
                tmp = await crimgo_db.get_message_id_and_text(state)
                if data['route'] == '–ö –º–æ—Ä—é':
                    text = tmp + '\n–û—Å—Ç. {pickup_point}, {pickup_time}, {seats}–º'.format(pickup_point = data['geo'], pickup_time = data['aprox_time'], seats = data['seat'])    
                if data['route'] == '–û—Ç –º–æ—Ä—è':
                    ticket_pp_time = await crimgo_db.ticket_pp_time(ticket_id)
                    text = tmp + '\n–û—Å—Ç. {pickup_point}, {pickup_time}, {seats}–º'.format(pickup_point = data['geo'], pickup_time = (ticket_pp_time + config.TIME_OFFSET).strftime("%H:%M"), seats = data['seat'])    
                await bot.edit_message_text(chat_id = driver_chat_id[0], message_id = driver_chat_id[1], text = text, reply_markup=kb_start_trip)
                await crimgo_db.save_message_id_and_text(state, text)
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–π—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—á–∞–ª–∞ —Ä–µ–π—Å–∞
                status = await crimgo_db.trip_status(state)
                if status == 'scheduled':
                    start_time = await crimgo_db.get_trip_start_time_by_id(state)
                    tickets = await crimgo_db.get_dict_of_tickets_by_trip(state)
                    text = '–í–Ω–∏–º–∞–Ω–∏–µ, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–æ —Ä–µ–π—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {start_time}\n'.format(start_time = (start_time + config.TIME_OFFSET).strftime("%H:%M"))
                    # –°–æ–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    for i in tickets:
                        text = text + '–û—Å—Ç. {pp}, {time}, {seats}–º\n'.format(pp = i[0], time = (i[2] + config.TIME_OFFSET).strftime("%H:%M"), seats = i[1])
                    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await bot.edit_message_text(chat_id = driver_chat_id[0], message_id = driver_chat_id[1], text = text, reply_markup=kb_start_trip)
        
        await state.finish()

    # –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π
    if callback.data =='–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π':
        await cmd_card_payment(state, callback.message)

# –§—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π
async def cmd_card_payment(state: FSMContext, message: types.Message):
    async with state.proxy() as data:
            data['otp'] = randrange(1000, 9999, 1)

    await message.reply('–ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–∞') 
    if config.PAYMENTS_PROVIDER_TOKEN.split(':')[1] == 'TEST':
                 await bot.send_message(message.chat.id, '–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–∫—É–ø–∞')

    await bot.send_invoice(message.chat.id,
                       title='–ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–∞',
                       description=('–ü–æ–∫—É–ø–∫–∞ {seat} –±–∏–ª–µ—Ç–∞(–æ–≤)'.format(seat=data['seat'])),
                       provider_token=config.PAYMENTS_PROVIDER_TOKEN,
                       currency='rub',
                       photo_url=config.SHUTTLE_IMAGE_URL,
                       photo_height=512,  # !=0/None, –∏–Ω–∞—á–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–∫–∞–∂–µ—Ç—Å—è
                       photo_width=512,
                       photo_size=512,
                       is_flexible=False,  # True –µ—Å–ª–∏ –∫–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
                       prices=[types.LabeledPrice(label='–ë–∏–ª–µ—Ç(—ã) –Ω–∞ —à–∞—Ç—Ç–ª', amount=(int(data['total_amount'])*100))],
                       start_parameter='shuttle-order-example',
                       payload='some-invoice-payload-for-our-internal-use'
                       )

@dp.pre_checkout_query_handler(lambda query: True, state=FSMOrder_trip.s_payment_type)
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT, state=FSMOrder_trip.s_payment_type)
async def process_successful_payment(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ
        data['payment_type'] = 'card'
        data['total_amount'] = message.successful_payment.total_amount // 100
        data['telegram_payment_charge_id'] = message.successful_payment.telegram_payment_charge_id
        data['provider_payment_charge_id'] = message.successful_payment.provider_payment_charge_id
        data['pass_id'] = message.from_user.id
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            message.chat.id,
            '–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É `{total_amount} {currency}` —Å–æ–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º CrimGo. –ö–æ–¥ –¥–ª—è –ø–æ—Å–∞–¥–∫–∏ `{otp}`'.format(
            total_amount=data['total_amount'],
            currency=message.successful_payment.currency,
            otp=data['otp']
            )
        )
    # –ó–∞–ø–∏—Å—å –≤ –ë–î –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ FSM    
    payment_id = await crimgo_db.successful_payment(state)
    ticket_id = await crimgo_db.create_ticket(state, payment_id)
    await crimgo_db.trip_status_review(state)


    ###########
    # –ü—É—à –≤–æ–¥–∏—Ç–µ–ª—é
    driver_chat_id = await crimgo_db.get_driver_chat_id(state)
    # –ï—Å–ª–∏ —á–∞—Ç ID –Ω–µ –ø—É—Å—Ç
    if driver_chat_id[0] is not None:
        is_first_ticket = await crimgo_db.is_first_ticket(state)
        # –ü–µ—Ä–≤—ã–π –±–∏–ª–µ—Ç –≤ —Ä–µ–π—Å–µ
        if is_first_ticket is True:
            trip_details = await crimgo_db.trip_details(state)
            await bot.send_message(driver_chat_id[0], '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —Ä–µ–π—Å {trip_id} "{route}". –°—Ç–∞—Ä—Ç –≤ {start_time}'.format(trip_id = trip_details[0], route = trip_details[1], start_time = (config.TIME_OFFSET + trip_details[2]).strftime("%H:%M")), reply_markup=kb_driver_shift)
            if data['route'] == '–ö –º–æ—Ä—é':
                text = '–û—Å—Ç. {pickup_point}, {pickup_time}, {seats}–º'.format(pickup_point = data['geo'], pickup_time = data['aprox_time'], seats = data['seat'])    
            if data['route'] == '–û—Ç –º–æ—Ä—è':
                ticket_pp_time = await crimgo_db.ticket_pp_time(ticket_id)
                text = '–û—Å—Ç. {pickup_point}, {pickup_time}, {seats}–º'.format(pickup_point = data['geo'], pickup_time = (ticket_pp_time + config.TIME_OFFSET).strftime("%H:%M"), seats = data['seat'])    
            msg = await bot.send_message(driver_chat_id[0], text, reply_markup=kb_start_trip)
            await crimgo_db.set_shuttle_message_id(msg.message_id, state)
            await crimgo_db.save_message_id_and_text(state, text)
        else:
            # –ù–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è –æ –Ω–æ–≤—ã—Ö –±–∏–ª–µ—Ç–∞—Ö
            tmp = await crimgo_db.get_message_id_and_text(state)
            if data['route'] == '–ö –º–æ—Ä—é':
                text = tmp + '\n–û—Å—Ç. {pickup_point}, {pickup_time}, {seats}–º'.format(pickup_point = data['geo'], pickup_time = data['aprox_time'], seats = data['seat'])
            if data['route'] == '–û—Ç –º–æ—Ä—è':
                ticket_pp_time = await crimgo_db.ticket_pp_time(ticket_id)
                text = tmp + '\n–û—Å—Ç. {pickup_point}, {pickup_time}, {seats}–º'.format(pickup_point = data['geo'], pickup_time = (ticket_pp_time + config.TIME_OFFSET).strftime("%H:%M"), seats = data['seat'])
            await bot.edit_message_text(chat_id = driver_chat_id[0], message_id = driver_chat_id[1], text = text, reply_markup=kb_start_trip)
            await crimgo_db.save_message_id_and_text(state, text)
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–π—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—á–∞–ª–∞ —Ä–µ–π—Å–∞
            status = await crimgo_db.trip_status(state)
            if status == 'scheduled':
                start_time = await crimgo_db.get_trip_start_time_by_id(state)
                tickets = await crimgo_db.get_dict_of_tickets_by_trip(state)
                text = '–í–Ω–∏–º–∞–Ω–∏–µ, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–æ —Ä–µ–π—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {start_time}\n'.format(start_time = (start_time + config.TIME_OFFSET).strftime("%H:%M"))
                # –°–æ–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                for i in tickets:
                    text = text + '–û—Å—Ç. {pp}, {time}, {seats}–º\n'.format(pp = i[0], time = (i[2] + config.TIME_OFFSET).strftime("%H:%M"), seats = i[1])
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await bot.edit_message_text(chat_id = driver_chat_id[0], message_id = driver_chat_id[1], text = text, reply_markup=kb_start_trip)
    ###########
    await state.finish()

#async def pp_recalcutation():
    # –µ—Å–ª–∏ –º–µ—Å—Ç –æ—Å—Ç–∞–ª–æ—Å—å –æ–¥–Ω–æ –∏ –º–µ–Ω—å—à–µ –º–µ—Å—Ç–æ

def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(commands_start, commands=['start', 'help'])
    dp.register_message_handler(get_contact, content_types=['contact'])
    dp.register_message_handler(cmd_order_trip, Text(equals='–ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–µ–∑–¥–∫—É', ignore_case=True))
    dp.register_message_handler(cmd_subscription, Text(equals='–ö—É–ø–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç', ignore_case=True))
    dp.register_message_handler(cmd_contact_with_support, Text(equals='–ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏', ignore_case=True))
    dp.register_callback_query_handler(menu_route_selection, state=FSMOrder_trip.s_route_selection)
    dp.register_callback_query_handler(menu_seat_selection, state=FSMOrder_trip.s_seat_selection)
    dp.register_callback_query_handler(menu_pp_confirm, state=FSMOrder_trip.s_geolocation)
    dp.register_callback_query_handler(menu_trip_confirm, state=FSMOrder_trip.s_pp_confirmation)
    dp.register_callback_query_handler(menu_payment_type, state=FSMOrder_trip.s_trip_confirmation)
    dp.register_callback_query_handler(menu_handle_payment, state=FSMOrder_trip.s_payment_type)