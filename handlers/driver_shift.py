from email import message
import re
from subprocess import call
from time import time
from aiogram import Dispatcher, types
from create_bot import dp, bot
from database import crimgo_db, crimgo_db_crud
from keyboards import kb_driver, kb_driver_shift, kb_start_point, kb_start_trip, kb_onboarding_trip, kb_continue_trip, kb_pass_absent, kb_retry_code
from aiogram.types import ReplyKeyboardRemove

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup

from config import config

class FSMStartDriverShift(StatesGroup):
    s_inpute_shuttle_name = State()
    s_select_start_point = State()
    s_select_finish_point = State()

class FSMCodeVerification(StatesGroup):
    s_code_input = State()
    s_onboarding_finish = State()

async def cmd_start_shift(message: types.Message):
    await FSMStartDriverShift.s_inpute_shuttle_name.set()
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –∏–º—è —à–∞—Ç—Ç–ª–∞', reply_markup=ReplyKeyboardRemove())
    
async def cmd_shuttle_bind(message: types.Message, state: FSMContext): 
    if (await crimgo_db.check_shuttle_name_and_status(message.text)):
        await FSMStartDriverShift.s_select_start_point.set()
        async with state.proxy() as data:
            data['shuttle_name'] = message.text
        await message.reply('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, —Å–∫–æ—Ä–æ –≤–∞–º –±—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–º —Ä–µ–π—Å, —É–∫–∞–∂–∏—Ç–µ –Ω–∞ –∫–∞–∫–æ–π –∫–æ–Ω–µ—á–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å.', reply_markup=kb_start_point)
    else:
        await message.reply('–û—à–∏–±–∫–∞, –Ω–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è —à–∞—Ç—Ç–ª–∞ –∏–ª–∏ —à–∞—Ç—Ç–ª –∑–∞–Ω—è—Ç', reply_markup=kb_driver)
        await state.finish()

async def cmd_start_point(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['start_point'] = callback.data
        data['driver_chat_id'] = callback.message.chat.id
        if callback.data == '–ñ–ö –†–∏—à–µ–ª—å–µ –®–∞—Ç–æ': data['route'] = 1
        else: data['route'] = 2
    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —à–∞—Ç—Ç–ª
    await crimgo_db.bind_shuttle_to_driver(state, callback)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø—Ä–∏–≤—è–∑–∞–Ω
    if await crimgo_db.is_shuttle_binded(state) is not None or False:
        await callback.message.answer('–°–ø–∞—Å–∏–±–æ! –í—ã —É–∫–∞–∑–∞–ª–∏, —á—Ç–æ —Å—Ç–æ–∏—Ç–µ –Ω–∞ –æ—Å—Ç. {start_point}. –°–∫–æ—Ä–æ –≤–∞–º –Ω–∞–∑–Ω–∞—á–∞—Ç —Ä–µ–π—Å, –æ–∂–∏–¥–∞–π—Ç–µ'.format(start_point = callback.data), reply_markup=kb_driver_shift)
        # await crimgo_db.set_shuttle_message_id(callback.message.message_id, state)
        # –ó–∞–ø–∏—Å–∞—Ç—å —á–∞—Ç message id
        trip_details = await crimgo_db.check_available_trip(state)
        if trip_details is not None:
            await callback.message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —Ä–µ–π—Å {trip_id} "{route}". –°—Ç–∞—Ä—Ç –≤ {start_time} –æ—Ç "{start_point}"'.format(trip_id = trip_details[0], route = trip_details[1], start_time = (config.TIME_OFFSET + trip_details[2]).strftime("%H:%M"), start_point = data['start_point']), reply_markup=kb_start_trip)
        # else:
        #     await callback.message.reply('–°–ø–∞—Å–∏–±–æ! –í—ã —É–∫–∞–∑–∞–ª–∏, —á—Ç–æ —Å—Ç–æ–∏—Ç–µ –Ω–∞ –æ—Å—Ç. {start_point}, —Å–∫–æ—Ä–æ –≤–∞–º –Ω–∞–∑–Ω–∞—á–∞—Ç —Ä–µ–π—Å, –æ–∂–∏–¥–∞–π—Ç–µ'.format(start_point = callback.data), reply_markup=kb_driver_shift)
            
    else:
        await message.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ', reply_markup=ReplyKeyboardRemove())
        await state.finish()

    await callback.answer()
    await state.finish()

async def cmd_start_trip(callback: types.CallbackQuery):
    await callback.answer()

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–µ–∑–¥–∫–∏
    await crimgo_db.set_trip_status(callback, 'scheduled', 'started')
    
    # –ü–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ —Ä–µ–π—Å
    tickets = await crimgo_db.get_dict_of_tickets_by_driver(callback.from_user.id)

    # –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç
    route = await crimgo_db.get_route(callback)

    if route == 1:
        # –ï—Å–ª–∏ —à–∞—Ç—Ç–ª –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –∞ –ø–µ—Ä–≤—ã–π pp –Ω–µ —Ä–∞–≤–µ–Ω –Ω–∞—á–∞–ª—å–Ω–æ–π
        if (await crimgo_db.get_shuttle_position(callback)) == 1 and tickets[0][3] != 1:
            await crimgo_db.set_shuttle_position(callback)
    if route == 2:
        if (await crimgo_db.get_shuttle_position(callback)) == 9 and tickets[0][3] != 9:
            await crimgo_db.set_shuttle_position(callback)

    # –¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —à–∞—Ç—Ç–ª–∞
    shuttle_position = await crimgo_db.get_shuttle_position(callback)

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–µ—á–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
    ending_station = await crimgo_db.get_ending_station_by_route(route)
    trip_finish_time = await crimgo_db.get_trip_finish_time(callback.from_user.id)

    # –°–æ–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = ''
    for i in tickets:
        if shuttle_position == i[3]:
            text = text +  '->'
        if i[4] == 'cash':
            text = text + '–û—Å—Ç. {pp}, {time}, {seats}–º. –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏: {total_amount}\n'.format(pp = i[0], time = (i[2] + config.TIME_OFFSET).strftime("%H:%M"), seats = i[1], total_amount = i[5])
        else:
            text = text + '–û—Å—Ç. {pp}, {time}, {seats}–º.\n'.format(pp = i[0], time = (i[2] + config.TIME_OFFSET).strftime("%H:%M"), seats = i[1])
        if i == tickets[-1]:
            text = text + '–ö–æ–Ω–µ—á–Ω–∞—è –æ—Å—Ç. - {pp}, –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è - {time}'.format(pp = ending_station, time = trip_finish_time.strftime("%H:%M"))

    # –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ—Å–∞–¥–∫–∞
    await callback.message.answer(text, reply_markup=kb_onboarding_trip)
    
    
async def cmd_onboarding(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    # –¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —à–∞—Ç—Ç–ª–∞
    shuttle_position = await crimgo_db.get_shuttle_position(callback)

    # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª-–≤–æ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    t_counter = await crimgo_db.get_dict_of_tickets_by_shuttle_position(callback.from_user.id, shuttle_position)
    
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ 4—Ö –∑–Ω–∞—á–Ω—ã–π —Å–µ–∫—Ä—Ç–µ–Ω—ã–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∑–æ–≤—É—Ç –ø–∞—Å—Å–∞–∂–∏—Ä—ã', reply_markup=ReplyKeyboardRemove())
    await callback.message.answer('–û–∂–∏–¥–∞–µ–º {t_counter} –∫–æ–¥(–∞) –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É'.format(t_counter = t_counter), reply_markup=kb_pass_absent)
    await FSMCodeVerification.s_code_input.set()    
    async with state.proxy() as data:
        data['t_counter'] = t_counter
        data['shuttle_position'] = shuttle_position
 
# –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞
async def cmd_code_verification(message: types.Message, state: FSMContext):
    # –ö–æ–ª-–≤–æ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –ø–æ–∑–∏—Ü–∏—è —à–∞—Ç—Ç–ª–∞
    async with state.proxy() as data:
        t_counter = data['t_counter']
        shuttle_position = data['shuttle_position']

    # –ü–æ–∫–∞ –∫–æ–ª-–≤–æ –±–∏–ª–µ—Ç–æ–≤ !=0  
    while t_counter !=0:
        code = message.text
        # for code in codes:
        if (await crimgo_db.verify_pass_code(message, code)) is True:
            await message.reply('–ö–æ–¥ {code} ‚úî'.format(code = code), reply_markup=ReplyKeyboardRemove())
        else:
            await message.reply('–ö–æ–¥ {code} êÑÇ'.format(code = code), reply_markup=ReplyKeyboardRemove())
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è s_code_input
            await state.finish()
            await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ', reply_markup=kb_retry_code)
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é cmd_code_verification
            break
        # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª-–≤–æ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        t_counter = await crimgo_db.get_dict_of_tickets_by_shuttle_position(message.from_user.id, shuttle_position)
        # await message.reply('–ü–∞—Å—Å–∞–∂–∏—Ä –Ω–µ –ø—Ä–∏—à–µ–ª?', reply_markup=kb_pass_absent)
    else:
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è s_code_input
        await state.finish()
        await message.answer('–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏, –Ω–∞–∂–º–∏—Ç–µ `–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å`', reply_markup=kb_continue_trip)    
    
# –ü—Ä–æ–¥–æ–∂–∏—Ç—å –ø–æ–µ–∑–¥–∫—É
async def cmd_continue_trip(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    # await crimgo_db.set_shuttle_position(callback)
    # –ü–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ —Ä–µ–π—Å
    tickets = await crimgo_db.get_dict_of_tickets_by_driver(callback.from_user.id)
    
    # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è —à–∞—Ç–ª–∞ —Ä–∞–≤–Ω–∞ –ø–æ—Å–ª–µ–¥–µ–π pp, –∑–Ω–∞—á–∏—Ç –µ–¥–µ–º –Ω–∞ –∫–æ–Ω–µ—á–Ω—É—é
    text = ''
    if (await crimgo_db.get_shuttle_position(callback)) == tickets[-1][3]:
        # TODO –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–π—Å–∞ + –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—é
        # –ò–î –º–∞—Ä—à—Ä—É—Ç–∞
        route_id_by_trip = await crimgo_db.route_id_by_trip(callback.from_user.id)
        # –ò–Ω—Ñ–æ –æ –∫–æ–Ω–µ—á–Ω–æ–π
        ending_station = await crimgo_db.get_ending_station_by_route(route_id_by_trip)
        trip_finish_time = await crimgo_db.get_trip_finish_time(callback.from_user.id)
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–µ–∑–¥–∫–∏
        await crimgo_db.set_trip_status(callback, 'started', 'finished')
        await callback.message.answer('–ö–æ–Ω–µ—á–Ω–∞—è –æ—Å—Ç. - {pp}, –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è - {time}'.format(pp = ending_station, time = trip_finish_time.strftime("%H:%M")), reply_markup=kb_continue_trip)
        async with state.proxy() as data:
            data['route'] = route_id_by_trip

        await FSMStartDriverShift.s_select_finish_point.set()
    else:
        # –ü–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —à–∞—Ç—Ç–ª–∞
        await crimgo_db.set_shuttle_position(callback)

        # –¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —à–∞—Ç—Ç–ª–∞
        shuttle_position = await crimgo_db.get_shuttle_position(callback)

        route = await crimgo_db.get_route(callback)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–µ—á–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        ending_station = await crimgo_db.get_ending_station_by_route(route)
        trip_finish_time = await crimgo_db.get_trip_finish_time(callback.from_user.id)

        for i in tickets:
            if shuttle_position == i[3]:
                text = text +  '->'
            # –°–æ–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            # text = text + '–û—Å—Ç. {pp}, {time}, {seats}–º\n'.format(pp = i[0], time = (i[2] + config.TIME_OFFSET).strftime("%H:%M"), seats = i[1])
            if i[4] == 'cash':
                text = text + '–û—Å—Ç. {pp}, {time}, {seats}–º. –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏: {total_amount}\n'.format(pp = i[0], time = (i[2] + config.TIME_OFFSET).strftime("%H:%M"), seats = i[1], total_amount = i[5])
            else:
                text = text + '–û—Å—Ç. {pp}, {time}, {seats}–º.\n'.format(pp = i[0], time = (i[2] + config.TIME_OFFSET).strftime("%H:%M"), seats = i[1])
            if i == tickets[-1]:
                text = text + '–ö–æ–Ω–µ—á–Ω–∞—è {pp}, {time}'.format(pp = ending_station, time = trip_finish_time.strftime("%H:%M"))
         # –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ—Å–∞–¥–∫–∞
        await callback.message.answer(text, reply_markup=kb_onboarding_trip)    

async def cmd_stop_shift(message: types.Message):
    await crimgo_db.stop_driver_shift(message)
    await message.reply('–°–º–µ–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞', reply_markup=kb_driver)

async def cmd_finish_trip(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    async with state.proxy() as data:
        if data['route'] == 1:
            data['route'] = 2
            start_point = '–£—Å–ø–µ–Ω—Å–∫–∞—è —Ü–µ—Ä–∫–æ–≤—å'
        else:
            data['route'] = 1    
            start_point = '–ñ–ö –†–∏—à–µ–ª—å–µ –®–∞—Ç–æ'
        
        data['driver_chat_id'] = callback.message.chat.id
        data['shuttle_name'] = await crimgo_db.get_shuttle_name_by_driver(callback)
        
        await crimgo_db.set_shuttle_position_by_pp_name(start_point, data['route'])
        await state.finish()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø—Ä–∏–≤—è–∑–∞–Ω
    if await crimgo_db.is_shuttle_binded(state) is not None or False:
        await callback.message.answer('–°–ø–∞—Å–∏–±–æ! –í—ã —É–∫–∞–∑–∞–ª–∏, —á—Ç–æ —Å—Ç–æ–∏—Ç–µ –Ω–∞ –æ—Å—Ç. {start_point}. –°–∫–æ—Ä–æ –≤–∞–º –Ω–∞–∑–Ω–∞—á–∞—Ç —Ä–µ–π—Å, –æ–∂–∏–¥–∞–π—Ç–µ'.format(start_point = start_point), reply_markup=kb_driver_shift)
        # await crimgo_db.set_shuttle_message_id(callback.message.message_id, state)
        # –ó–∞–ø–∏—Å–∞—Ç—å —á–∞—Ç message id
        trip_details = await crimgo_db.check_available_trip(state)
        if trip_details is not None:
            await callback.message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —Ä–µ–π—Å {trip_id} "{route}". –°—Ç–∞—Ä—Ç –≤ {start_time} –æ—Ç "{start_point}"'.format(trip_id = trip_details[0], route = trip_details[1], start_time = (config.TIME_OFFSET + trip_details[2]).strftime("%H:%M"), start_point = data['start_point']), reply_markup=kb_start_trip)    
    else:
        await message.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ', reply_markup=ReplyKeyboardRemove())

def register_handlers_driver_on_shift(dp: Dispatcher):
    dp.register_message_handler(cmd_start_shift, Text(equals='–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –Ω–µ –Ω–∞ –ª–∏–Ω–∏–∏', ignore_case=False))
    dp.register_message_handler(cmd_stop_shift, Text(equals='–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –Ω–∞ –ª–∏–Ω–∏–∏', ignore_case=False))
    dp.register_message_handler(cmd_shuttle_bind, state = FSMStartDriverShift.s_inpute_shuttle_name)
    dp.register_callback_query_handler(cmd_start_point, state = FSMStartDriverShift.s_select_start_point)
    dp.register_callback_query_handler(cmd_start_trip, Text(equals='–ù–∞—á–∞—Ç—å —Ä–µ–π—Å', ignore_case=False))
    dp.register_callback_query_handler(cmd_continue_trip, Text(equals='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', ignore_case=False))
    dp.register_callback_query_handler(cmd_onboarding, Text(equals='–ü–æ—Å–∞–¥–∫–∞', ignore_case=False))
    dp.register_message_handler(cmd_code_verification, state = FSMCodeVerification.s_code_input)
    dp.register_callback_query_handler(cmd_finish_trip, state = FSMStartDriverShift.s_select_finish_point)